%% Start of the program
clc
clear

fprintf("Welcome to art with algorithms, brought to you by an image generator program!\n\n");

%% Display steps and how the program works

fprintf('-----------------------------\n');
fprintf('Choose the type of image to generate:\n');
fprintf('1. Voronoi Art\n');
fprintf('2. Fractals\n');
fprintf('3. Perlin Noise\n');
choice = input('Enter your choice (1/2/3): ');fprintf('------------------------------------\n');

%% Read the image
try
    fileName = input("Please enter the file name (remember to attach the suffix of the image file and single quotation marks): ");
    fprintf("\n")
    image = imread(fileName);
    original_image = image; 
catch
    error("Error reading the image file.");
end

%% Determine the size of the image

[rows, cols] = size(image); % col is generated by [] = size(); Therefore, it is the channels of the column

fprintf('Image Size:\n');
fprintf('-----------------\n');
fprintf('Rows: %d\n', rows);
fprintf('Columns: %d', cols);

if size(original_image, 3) == 3
    fprintf(' (RGB image)\n');
else
    fprintf(' (Grayscale image)\n');
end

fprintf('\n');

%% Image Processing (Add your image processing code here)
% For example, you can apply a filter, adjust contrast, or perform other processing.
% Process the 'image' variable here.

%% Voronoi Diagram Generation and Color Clustering
numCells = 10000; % Number of Voronoi cells (you can adjust this)
numColors = 20;  % Number of representative colors (you can adjust this)

% Generate Voronoi points
voronoiPointsX = randi(size(image, 2), 1, numCells);
voronoiPointsY = randi(size(image, 1), 1, numCells);

% Generate query points using meshgrid
[x, y] = meshgrid(1:size(image, 2), 1:size(image, 1));
queryPoints = [x(:), y(:)];

% Compute Voronoi diagram
[voronoiIndices, ~] = dsearchn([voronoiPointsX', voronoiPointsY'], queryPoints);

% Quantize colors using uniform quantization
colorRange = 256; % Assuming 8-bit color channels (0-255)
binSize = colorRange / numColors;

% Quantize pixel colors
pixelColors = reshape(image, [], 3);
quantizedColors = floor(double(pixelColors) / binSize) * binSize + binSize / 2;

% Map quantized colors to cluster indices
[~, clusterIndices] = ismember(quantizedColors, unique(quantizedColors, 'rows'), 'rows');

%% Apply Voronoi Art Style
clusterCenters = unique(quantizedColors, 'rows'); % Representative colors
for i = 1:numCells
    cellIndices = voronoiIndices == i;
    representativeColor = clusterCenters(clusterIndices(i), :);
    
    % Fill Voronoi cell with representative color
    [rowsCell, colsCell] = size(cellIndices); % Get dimensions of the cellIndices matrix
    numPixels = sum(cellIndices(:)); % Count the number of pixels in the cell
    
    % Create a matrix of the same size as cellIndices, filled with the representative color
    cellColorMatrix = repmat(uint8(representativeColor), rowsCell, colsCell);
    
    % Use logical indexing to assign the color to the corresponding pixels in the image
    image(cellIndices) = cellColorMatrix(cellIndices);
end

%% Save Voronoi Art as an Image File
outputFileName = 'voronoi_art.png'; % Specify the desired output file name

imwrite(image, outputFileName); % Save the Voronoi art as an image file

%% Display Original and Voronoi Art
subplot(1, 2, 1);
imshow(original_image);
title('Original Image');

subplot(1, 2, 2);
imshow(image);
title('Voronoi Art');

%% End of the program
fprintf("Program finished. Voronoi Art saved as '%s'. Thank you for using!\n", outputFileName);
